#+begin_src js :var file="figures/service-time.pdf" :results output raw drawer :exports results
var $ = require("org-helper")('./data/serviceTime100.json');
var _ = $._; var data = $.data

data = _.filtEq('type', 'servicetime')(data)
data = _.pluck(data, 'responseTime')
data = _.filter(data, (x) => x < 350)

_.histo(file, data, { xaxis: "time (ms)", width: '20', verbose: false})
#+end_src

#+RESULTS:
:RESULTS:
file:figures/service-time.pdf
:END:

#+begin_src js :var file="figures/fixed-response-time.pdf" :results output raw drawer :exports results
var $ = require("org-helper")('./data/fixed100.json');
var _ = $._; var data = $.data

data = _.map(data, (i) => {
   return { variable: i.lambda, value: i.responseTime }
})

_.box(file, data, { xaxis: "time (ms)", width: '20', verbose: false})
#+end_src

#+RESULTS:
:RESULTS:
file:figures/fixed-response-time.pdf
:END:

#+begin_src js :var file="figures/exponential-response-time.pdf" :results output raw drawer :exports results
var $ = require("org-helper")('./data/exponential100.json');
var _ = $._; var data = $.data

data = _.map(data, (i) => {
   return { variable: i.lambda, value: i.responseTime }
})

_.box(file, data, { xaxis: "lambda (Req/s)", yaxis: 'Response time (ms)', width: '20', verbose: false})
#+end_src

#+RESULTS:
:RESULTS:
file:figures/exponential-response-time.pdf
:END:

#+begin_src js :var file="figures/expo-lambda-2.5.pdf" :results output raw drawer :exports results
var $ = require("org-helper")('./data/exponential100.json');
var _ = $._; var data = $.data

data = _.filtEq('lambda', 2.5)(data)
data = _.pluck(data, 'responseTime')

_.histo(file, data, { xaxis: "time (ms)", width: '20', verbose: false})
#+end_src

#+RESULTS:
:RESULTS:
file:figures/expo-lambda-2.5.pdf
:END:

#+begin_src js :var file="figures/fixed-lambda-2.5.pdf" :results output raw drawer :exports results
var $ = require("org-helper")('./data/fixed100.json');
var _ = $._; var data = $.data

data = _.filtEq('lambda', 2.5)(data)
data = _.pluck(data, 'responseTime')

_.histo(file, data, { xaxis: "time (ms)", width: '20', verbose: false})
#+end_src

#+RESULTS:
:RESULTS:
file:figures/fixed-lambda-2.5.pdf
:END:

#+begin_src js :var file="figures/service-time.pdf" :results output raw drawer :exports results
var $ = require("org-helper")('./data/serviceTime100.json');
var _ = $._; var data = $.data

data = _.filtEq('type', 'servicetime')(data)
data = _.pluck(data, 'responseTime')
data = _.filter(data, (x) => x < 350)

let n = data.length
let mean = _.sum(data)/n

let v = _.map(data, (i) => Math.pow(i - mean, 2))
v = _.sum(v)/n

console.log(`Mean: ${mean}, variance: ${v}, std: ${Math.sqrt(v)}, lambda=${1000/mean}`)

#+end_src

#+RESULTS:
:RESULTS:
Mean: 201.87949595599997, variance: 41.71166811223823, std: 6.458457099976606, lambda=4.953450053283033
:END:
